// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Rest.Teams;
//
//    var getChatsResponse = GetChatsResponse.FromJson(jsonString);

namespace Rest.Teams
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetChatsResponse
    {
        [JsonProperty("@odata.context")]
        public Uri OdataContext { get; set; }

        [JsonProperty("value")]
        public ChatSummary[] Chats { get; set; }
    }

    public partial class ChatSummary
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("topic")]
        public string Topic { get; set; }

        [JsonProperty("createdDateTime")]
        public DateTimeOffset CreatedDateTime { get; set; }

        [JsonProperty("lastUpdatedDateTime")]
        public DateTimeOffset LastUpdatedDateTime { get; set; }
    }

    public partial class GetChatsResponse
    {
        public static GetChatsResponse FromJson(string json) => JsonConvert.DeserializeObject<GetChatsResponse>(json, Rest.Teams.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetChatsResponse self) => JsonConvert.SerializeObject(self, Rest.Teams.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
